// Generated by CoffeeScript 1.8.0
var LoadBalancer, copy,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

copy = function(source, target) {
  var key, value, _results;
  _results = [];
  for (key in source) {
    value = source[key];
    if (typeof value === 'object') {
      if ((target[key] == null) || typeof target[key] !== 'object') {
        target[key] = {};
      }
      _results.push(copy(value, target[key]));
    } else {
      _results.push(target[key] = value);
    }
  }
  return _results;
};

module.exports = LoadBalancer = (function() {
  function LoadBalancer(options) {
    this.distribute = __bind(this.distribute, this);
    this.next = __bind(this.next, this);
    this.remove = __bind(this.remove, this);
    this.add = __bind(this.add, this);
    this._options = {
      method: 'roundrobin'
    };
    copy(options, this._options);
    this._servers = [];
    this._index = 0;
  }

  LoadBalancer.prototype.add = function(target) {
    if (target.indexOf('http://') !== 0 && target.indexOf('https://') !== 0) {
      target = "http://" + t;
    }
    this._servers.push(target);
    return this;
  };

  LoadBalancer.prototype.remove = function(target) {
    if (target.indexOf('http://') !== 0 && target.indexOf('https://') !== 0) {
      target = "http://" + t;
    }
    this._servers.remove(target);
    return this;
  };

  LoadBalancer.prototype.next = function() {
    var result;
    this._index = this._index % this._servers.length;
    result = this._servers[this._index];
    this._index++;
    return result;
  };

  LoadBalancer.prototype.distribute = function() {
    return (function(_this) {
      return function(mount, url, req, res, next) {
        req.target = _this.next();
        return next();
      };
    })(this);
  };

  return LoadBalancer;

})();
