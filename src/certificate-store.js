// Generated by CoffeeScript 1.4.0
(function() {
  var CertificateStore, crypto, fs, tls,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  tls = require('tls');

  crypto = require('crypto');

  module.exports = CertificateStore = (function() {

    function CertificateStore() {
      this._getCertData = __bind(this._getCertData, this);

      this._getCertBundleData = __bind(this._getCertBundleData, this);

      this.getTlsOptions = __bind(this.getTlsOptions, this);

      this.getHttpsOptions = __bind(this.getHttpsOptions, this);

      this.isAvailable = __bind(this.isAvailable, this);

      this.add = __bind(this.add, this);
      this._certs = {};
      this._secureContexts = {};
    }

    CertificateStore.prototype.add = function(hostname, options) {
      var scOpts;
      scOpts = {
        key: this._getCertData(options.key),
        cert: this._getCertData(options.cert)
      };
      if (options.ca) {
        scOpts.ca = this._getCertBundleData(options.ca);
      }
      return this._secureContexts[hostname] = tls.createSecureContext(scOpts);
    };

    CertificateStore.prototype.isAvailable = function(hostname) {
      return this._secureContexts[hostname] != null;
    };

    CertificateStore.prototype.getHttpsOptions = function(options) {
      var result,
        _this = this;
      result = {
        SNICallback: function(hostname, callback) {
          return callback(null, _this._secureContexts[hostname]);
        },
        key: this._getCertData(options.key),
        cert: this._getCertData(options.cert)
      };
      if (options.ca) {
        result.ca = [this._getCertData(options.ca)];
      }
      return result;
    };

    CertificateStore.prototype.getTlsOptions = function(options) {
      var result;
      result = {
        key: this._getCertData(options.key),
        cert: this._getCertData(options.cert)
      };
      if (options.ca) {
        result.ca = [this._getCertData(options.ca)];
      }
      return result;
    };

    CertificateStore.prototype._getCertBundleData = function(pathname) {
      var ca, cert, chain, line, _i, _len;
      ca = [];
      chain = fs.readFileSync(pathname, 'utf8');
      chain = chain.split('\n');
      cert = [];
      for (_i = 0, _len = chain.length; _i < _len; _i++) {
        line = chain[_i];
        if (line.length === 0) {
          continue;
        }
        cert.push(line);
        if (line.match(/-END CERTIFICATE-/)) {
          ca.push(cert.join('\n'));
          cert = [];
        }
      }
      return ca;
    };

    CertificateStore.prototype._getCertData = function(pathname) {
      var path, _i, _len, _results;
      if (pathname) {
        if (pathname instanceof Array) {
          _results = [];
          for (_i = 0, _len = pathname.length; _i < _len; _i++) {
            path = pathname[_i];
            _results.push(this._getCertData(path));
          }
          return _results;
        } else if (fs.existsSync(pathname)) {
          return fs.readFileSync(pathname, 'utf8');
        }
      }
    };

    return CertificateStore;

  })();

}).call(this);
