// Generated by CoffeeScript 1.8.0
var DispatchNode,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

module.exports = DispatchNode = (function() {
  function DispatchNode() {
    this.exec = __bind(this.exec, this);
    this.clear = __bind(this.clear, this);
    this.use = __bind(this.use, this);
    this._handlers = [];
  }

  DispatchNode.prototype.use = function(handler) {
    var h, _i, _len;
    if (Array.isArray(handler)) {
      for (_i = 0, _len = handler.length; _i < _len; _i++) {
        h = handler[_i];
        this.use(h);
      }
    } else {
      this._handlers.push(handler);
    }
    return this;
  };

  DispatchNode.prototype.clear = function() {
    return this._handlers = [];
  };

  DispatchNode.prototype.exec = function() {
    var args, exec, index, items, next, _i;
    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), next = arguments[_i++];
    items = this._handlers.slice(0);
    index = 0;
    exec = function() {
      var item;
      if (index >= items.length) {
        return next.apply(null, args);
      }
      item = items[index];
      index++;
      return item.apply(null, __slice.call(args).concat([exec]));
    };
    return exec();
  };

  return DispatchNode;

})();
