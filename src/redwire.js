// Generated by CoffeeScript 1.8.0
var Bindings, LoadBalancer, RedWire, TcpProxy, WebProxy, copy, format_url,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

format_url = require('url').format;

LoadBalancer = require('./load-balancer');

Bindings = require('./bindings');

WebProxy = require('./web-proxy');

TcpProxy = require('./tcp-proxy');

copy = function(source, target) {
  var key, value, _results;
  _results = [];
  for (key in source) {
    value = source[key];
    if (typeof value === 'object') {
      if ((target[key] == null) || typeof target[key] !== 'object') {
        target[key] = {};
      }
      _results.push(copy(value, target[key]));
    } else {
      _results.push(target[key] = value);
    }
  }
  return _results;
};

module.exports = RedWire = (function() {
  function RedWire(options) {
    this.close = __bind(this.close, this);
    this.getBindings = __bind(this.getBindings, this);
    this.setBindings = __bind(this.setBindings, this);
    this.createNewBindings = __bind(this.createNewBindings, this);
    this.clear = __bind(this.clear, this);
    this.clearTls = __bind(this.clearTls, this);
    this.clearTcp = __bind(this.clearTcp, this);
    this.clearHttpsWs = __bind(this.clearHttpsWs, this);
    this.clearHttpWs = __bind(this.clearHttpWs, this);
    this.clearHttps = __bind(this.clearHttps, this);
    this.clearHttp = __bind(this.clearHttp, this);
    this.removeHttpsWs = __bind(this.removeHttpsWs, this);
    this.removeHttpWs = __bind(this.removeHttpWs, this);
    this.removeHttps = __bind(this.removeHttps, this);
    this.removeHttp = __bind(this.removeHttp, this);
    this.tls = __bind(this.tls, this);
    this.tcp = __bind(this.tcp, this);
    this.httpsWs = __bind(this.httpsWs, this);
    this.httpWs = __bind(this.httpWs, this);
    this.https = __bind(this.https, this);
    this.http = __bind(this.http, this);
    this.proxyWs = __bind(this.proxyWs, this);
    this.proxy = __bind(this.proxy, this);
    this.proxyTls = __bind(this.proxyTls, this);
    this.proxyTcp = __bind(this.proxyTcp, this);
    this.cors = __bind(this.cors, this);
    this.loadBalancer = __bind(this.loadBalancer, this);
    this.sslRedirect = __bind(this.sslRedirect, this);
    this.setHost = __bind(this.setHost, this);
    this._options = {
      http: {
        port: 8080,
        websockets: false
      },
      https: false,
      tcp: false,
      tls: false,
      proxy: {
        xfwd: true,
        prependPath: false
      }
    };
    copy(options, this._options);
    this._bindings = this.createNewBindings();
    if ((this._options.http != null) || (this._options.https != null)) {
      this._webProxy = new WebProxy(this._options, this);
    }
    if ((this._options.tcp != null) || (this._options.tls != null)) {
      this._tcpProxy = new TcpProxy(this._options, this);
    }
  }

  RedWire.prototype.setHost = function(host) {
    return (function(_this) {
      return function() {
        var args, mount, next, req, url, _i;
        mount = arguments[0], url = arguments[1], req = arguments[2], args = 5 <= arguments.length ? __slice.call(arguments, 3, _i = arguments.length - 1) : (_i = 3, []), next = arguments[_i++];
        req.host = host;
        return next();
      };
    })(this);
  };

  RedWire.prototype.sslRedirect = function(port) {
    return (function(_this) {
      return function(mount, url, req, res, next) {
        var target;
        target = parse_url(req.url);
        if (port != null) {
          target.port = port;
        }
        if (_this._options.https.port != null) {
          target.port = _this._options.https.port;
        }
        target.hostname = req.source.hostname;
        target.protocol = 'https:';
        res.writeHead(302, {
          Location: format_url(target)
        });
        return res.end();
      };
    })(this);
  };

  RedWire.prototype.loadBalancer = function(options) {
    return new LoadBalancer(options);
  };

  RedWire.prototype.cors = function(allowedHosts) {
    return (function(_this) {
      return function(mount, url, req, res, next) {
        var referer;
        referer = req.headers.referer;
        if (referer == null) {
          return next();
        }
        if (__indexOf.call(allowedHosts, referer) < 0) {
          return next();
        }
        res.setHeader('Access-Control-Allow-Origin', referer);
        res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        return next();
      };
    })(this);
  };

  RedWire.prototype.proxyTcp = function(target) {
    return this._tcpProxy.proxyTcp(target);
  };

  RedWire.prototype.proxyTls = function(options, target) {
    return this._tcpProxy.proxyTls(options, target);
  };

  RedWire.prototype.proxy = function(target) {
    return this._webProxy.proxy(target);
  };

  RedWire.prototype.proxyWs = function(target) {
    return this._webProxy.proxyWs(target);
  };

  RedWire.prototype.http = function(url, target) {
    return this._bindings.http(url, target);
  };

  RedWire.prototype.https = function(url, target) {
    return this._bindings.https(url, target);
  };

  RedWire.prototype.httpWs = function(url, target) {
    return this._bindings.httpWs(url, target);
  };

  RedWire.prototype.httpsWs = function(url, target) {
    return this._bindings.httpsWs(url, target);
  };

  RedWire.prototype.tcp = function(target) {
    return this._bindings.tcp(target);
  };

  RedWire.prototype.tls = function(target) {
    return this._bindings.tls(target);
  };

  RedWire.prototype.removeHttp = function(url) {
    return this._bindings.removeHttp(url);
  };

  RedWire.prototype.removeHttps = function(url) {
    return this._bindings.removeHttps(url);
  };

  RedWire.prototype.removeHttpWs = function(url) {
    return this._bindings.removeHttpWs(url);
  };

  RedWire.prototype.removeHttpsWs = function(url) {
    return this._bindings.removeHttpsWs(url);
  };

  RedWire.prototype.clearHttp = function() {
    return this._bindings.clearHttp();
  };

  RedWire.prototype.clearHttps = function() {
    return this._bindings.clearHttps();
  };

  RedWire.prototype.clearHttpWs = function() {
    return this._bindings.clearHttpWs();
  };

  RedWire.prototype.clearHttpsWs = function() {
    return this._bindings.clearHttpsWs();
  };

  RedWire.prototype.clearTcp = function() {
    return this._bindings.clearTcp();
  };

  RedWire.prototype.clearTls = function() {
    return this._bindings.clearTls();
  };

  RedWire.prototype.clear = function() {
    return this._bindings.clear();
  };

  RedWire.prototype.createNewBindings = function() {
    return new Bindings(this);
  };

  RedWire.prototype.setBindings = function(bindings) {
    return this._bindings = bindings;
  };

  RedWire.prototype.getBindings = function() {
    return this._bindings;
  };

  RedWire.prototype.close = function(cb) {
    if (this._webProxy != null) {
      this._webProxy.close();
    }
    if (this._tcpProxy != null) {
      this._tcpProxy.close();
    }
    if (cb != null) {
      return cb();
    }
  };

  return RedWire;

})();
