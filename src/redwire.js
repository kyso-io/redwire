// Generated by CoffeeScript 1.9.2
var Bindings, RedWire, TcpProxy, WebProxy, copy,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

Bindings = require('./bindings');

WebProxy = require('./web-proxy');

TcpProxy = require('./tcp-proxy');

copy = function(source, target) {
  var key, results, value;
  results = [];
  for (key in source) {
    value = source[key];
    if (typeof value === 'object') {
      if ((target[key] == null) || typeof target[key] !== 'object') {
        target[key] = {};
      }
      results.push(copy(value, target[key]));
    } else {
      results.push(target[key] = value);
    }
  }
  return results;
};

module.exports = RedWire = (function() {
  function RedWire(options) {
    this.close = bind(this.close, this);
    this.getBindings = bind(this.getBindings, this);
    this.setBindings = bind(this.setBindings, this);
    this.createNewBindings = bind(this.createNewBindings, this);
    this.clear = bind(this.clear, this);
    this.clearTls = bind(this.clearTls, this);
    this.clearTcp = bind(this.clearTcp, this);
    this.clearHttpsWs = bind(this.clearHttpsWs, this);
    this.clearHttpWs = bind(this.clearHttpWs, this);
    this.clearHttp2 = bind(this.clearHttp2, this);
    this.clearHttps = bind(this.clearHttps, this);
    this.clearHttp = bind(this.clearHttp, this);
    this.removeHttpsWs = bind(this.removeHttpsWs, this);
    this.removeHttpWs = bind(this.removeHttpWs, this);
    this.removeHttp2 = bind(this.removeHttp2, this);
    this.removeHttps = bind(this.removeHttps, this);
    this.removeHttp = bind(this.removeHttp, this);
    this.tls = bind(this.tls, this);
    this.tcp = bind(this.tcp, this);
    this.httpsWs = bind(this.httpsWs, this);
    this.httpWs = bind(this.httpWs, this);
    this.http2 = bind(this.http2, this);
    this.https = bind(this.https, this);
    this.http = bind(this.http, this);
    this.proxyTls = bind(this.proxyTls, this);
    this.proxyTcp = bind(this.proxyTcp, this);
    this.proxyWs = bind(this.proxyWs, this);
    this.proxy = bind(this.proxy, this);
    this.redirect302relative = bind(this.redirect302relative, this);
    this.redirect301relative = bind(this.redirect301relative, this);
    this.redirect302 = bind(this.redirect302, this);
    this.redirect301 = bind(this.redirect301, this);
    this.error500 = bind(this.error500, this);
    this.error404 = bind(this.error404, this);
    this.cors = bind(this.cors, this);
    this.loadBalancer = bind(this.loadBalancer, this);
    this.sslRedirect = bind(this.sslRedirect, this);
    this.setHost = bind(this.setHost, this);
    this._options = {
      http: false,
      https: false,
      http2: false,
      tcp: false,
      tls: false,
      proxy: {
        xfwd: true,
        prependPath: false
      },
      log: {
        debug: function() {},
        notice: function() {},
        error: function(err) {
          if (err.stack) {
            return console.error(err.stack);
          } else {
            return console.error(err);
          }
        }
      }
    };
    copy(options, this._options);
    this._bindings = this.createNewBindings();
    if ((this._options.http != null) || (this._options.https != null) || (this._options.http2 != null)) {
      this._webProxy = new WebProxy(this._options, (function(_this) {
        return function() {
          return _this._bindings;
        };
      })(this));
    }
    if ((this._options.tcp != null) || (this._options.tls != null)) {
      this._tcpProxy = new TcpProxy(this._options, (function(_this) {
        return function() {
          return _this._bindings;
        };
      })(this));
    }
  }

  RedWire.prototype.setHost = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).setHost.apply(ref, args);
  };

  RedWire.prototype.sslRedirect = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).sslRedirect.apply(ref, args);
  };

  RedWire.prototype.loadBalancer = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).loadBalancer.apply(ref, args);
  };

  RedWire.prototype.cors = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).cors.apply(ref, args);
  };

  RedWire.prototype.error404 = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).error404.apply(ref, args);
  };

  RedWire.prototype.error500 = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).error500.apply(ref, args);
  };

  RedWire.prototype.redirect301 = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).redirect301.apply(ref, args);
  };

  RedWire.prototype.redirect302 = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).redirect302.apply(ref, args);
  };

  RedWire.prototype.redirect301relative = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).redirect301relative.apply(ref, args);
  };

  RedWire.prototype.redirect302relative = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).redirect302relative.apply(ref, args);
  };

  RedWire.prototype.proxy = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).proxy.apply(ref, args);
  };

  RedWire.prototype.proxyWs = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._webProxy).proxyWs.apply(ref, args);
  };

  RedWire.prototype.proxyTcp = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._tcpProxy).proxyTcp.apply(ref, args);
  };

  RedWire.prototype.proxyTls = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._tcpProxy).proxyTls.apply(ref, args);
  };

  RedWire.prototype.http = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).http.apply(ref, args);
  };

  RedWire.prototype.https = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).https.apply(ref, args);
  };

  RedWire.prototype.http2 = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).http2.apply(ref, args);
  };

  RedWire.prototype.httpWs = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).httpWs.apply(ref, args);
  };

  RedWire.prototype.httpsWs = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).httpsWs.apply(ref, args);
  };

  RedWire.prototype.tcp = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).tcp.apply(ref, args);
  };

  RedWire.prototype.tls = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).tls.apply(ref, args);
  };

  RedWire.prototype.removeHttp = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).removeHttp.apply(ref, args);
  };

  RedWire.prototype.removeHttps = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).removeHttps.apply(ref, args);
  };

  RedWire.prototype.removeHttp2 = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).removeHttp2.apply(ref, args);
  };

  RedWire.prototype.removeHttpWs = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).removeHttpWs.apply(ref, args);
  };

  RedWire.prototype.removeHttpsWs = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = this._bindings).removeHttpsWs.apply(ref, args);
  };

  RedWire.prototype.clearHttp = function() {
    return this._bindings.clearHttp();
  };

  RedWire.prototype.clearHttps = function() {
    return this._bindings.clearHttps();
  };

  RedWire.prototype.clearHttp2 = function() {
    return this._bindings.clearHttp2();
  };

  RedWire.prototype.clearHttpWs = function() {
    return this._bindings.clearHttpWs();
  };

  RedWire.prototype.clearHttpsWs = function() {
    return this._bindings.clearHttpsWs();
  };

  RedWire.prototype.clearTcp = function() {
    return this._bindings.clearTcp();
  };

  RedWire.prototype.clearTls = function() {
    return this._bindings.clearTls();
  };

  RedWire.prototype.clear = function() {
    return this._bindings.clear();
  };

  RedWire.prototype.createNewBindings = function() {
    return new Bindings(this);
  };

  RedWire.prototype.setBindings = function(bindings) {
    return this._bindings = bindings;
  };

  RedWire.prototype.getBindings = function() {
    return this._bindings;
  };

  RedWire.prototype.close = function(cb) {
    var e;
    try {
      if (this._webProxy != null) {
        this._webProxy.close();
      }
      if (this._tcpProxy != null) {
        this._tcpProxy.close();
      }
    } catch (_error) {
      e = _error;
    }
    if (cb != null) {
      return cb();
    }
  };

  return RedWire;

})();
