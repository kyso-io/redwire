// Generated by CoffeeScript 1.8.0
var Bindings, DispatchNode, parse_url,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

parse_url = require('url').parse;

DispatchNode = require('./dispatch-node');

module.exports = Bindings = (function() {
  function Bindings(redwire) {
    this.removeHttpsWs = __bind(this.removeHttpsWs, this);
    this.removeHttpWs = __bind(this.removeHttpWs, this);
    this.removeHttps = __bind(this.removeHttps, this);
    this.removeHttp = __bind(this.removeHttp, this);
    this.httpsWs = __bind(this.httpsWs, this);
    this.httpWs = __bind(this.httpWs, this);
    this.https = __bind(this.https, this);
    this.http = __bind(this.http, this);
    this._redwire = redwire;
    this._http = new DispatchNode();
    this._https = new DispatchNode();
    this._httpWs = new DispatchNode();
    this._httpsWs = new DispatchNode();
  }

  Bindings.prototype.http = function(url, target) {
    var result;
    if (url.indexOf('http://') !== 0) {
      url = "http://" + url;
    }
    result = this._http.match(url);
    if (target == null) {
      return result;
    }
    if (typeof target === 'string') {
      return result.use(this._redwire.proxy(target));
    }
    if (typeof target === 'function') {
      return result.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.https = function(url, target) {
    var result;
    if (url.indexOf('https://') !== 0) {
      url = "https://" + url;
    }
    result = this._https.match(url);
    if (target == null) {
      return result;
    }
    if (typeof target === 'string') {
      return result.use(this._redwire.proxy(target));
    }
    if (typeof target === 'function') {
      return result.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.httpWs = function(url, target) {
    var result;
    if (url.indexOf('http://') !== 0) {
      url = "http://" + url;
    }
    result = this._httpWs.match(url);
    if (target == null) {
      return result;
    }
    if (typeof target === 'string') {
      return result.use(this._redwire.proxyWs(target));
    }
    if (typeof target === 'function') {
      return result.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.httpsWs = function(url, target) {
    var result;
    if (url.indexOf('https://') !== 0) {
      url = "https://" + url;
    }
    result = this._httpsWs.match(url);
    if (target == null) {
      return result;
    }
    if (typeof target === 'string') {
      return result.use(this._redwire.proxyWs(target));
    }
    if (typeof target === 'function') {
      return result.use(target);
    }
    throw Error('target not a known type');
  };

  Bindings.prototype.removeHttp = function(url) {
    return this._http.remove(url);
  };

  Bindings.prototype.removeHttps = function(url) {
    return this._https.remove(url);
  };

  Bindings.prototype.removeHttpWs = function(url) {
    return this._httpWs.remove(url);
  };

  Bindings.prototype.removeHttpsWs = function(url) {
    return this._httpsWs.remove(url);
  };

  return Bindings;

})();
