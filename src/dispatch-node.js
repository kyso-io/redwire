// Generated by CoffeeScript 1.9.2
var DispatchNode,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

module.exports = DispatchNode = (function() {
  function DispatchNode(url, createNode) {
    this.exec = bind(this.exec, this);
    this._dispatchListeners = bind(this._dispatchListeners, this);
    this._dispatchHandlers = bind(this._dispatchHandlers, this);
    this.use = bind(this.use, this);
    this.clear = bind(this.clear, this);
    this.remove = bind(this.remove, this);
    this.match = bind(this.match, this);
    this._find = bind(this._find, this);
    if (createNode == null) {
      createNode = function(url, createNode) {
        return new DispatchNode(url, createNode);
      };
    }
    this._createNode = createNode;
    this._url = url;
    this._handlers = [];
    this._listeners = [];
    this._wildcard = null;
  }

  DispatchNode.prototype._find = function(url) {
    var i, len, listener, ref;
    ref = this._listeners;
    for (i = 0, len = ref.length; i < len; i++) {
      listener = ref[i];
      if (listener.url === url) {
        return listener;
      }
    }
    return null;
  };

  DispatchNode.prototype.match = function(url) {
    var listener;
    if (url === '*') {
      if (this._wildcard == null) {
        this._wildcard = this._createNode('*');
      }
      return this._wildcard;
    }
    listener = this._find(url);
    if (listener == null) {
      listener = {
        url: url,
        node: this._createNode(url)
      };
      this._listeners.push(listener);
      this._listeners.sort(function(a, b) {
        return b.url.length - a.url.length;
      });
    }
    return listener.node;
  };

  DispatchNode.prototype.remove = function(url) {
    var index, listener;
    listener = this._find(url);
    if (listener != null) {
      index = this._listeners.indexOf(listener);
      this._listeners.splice(index, 1);
    }
    return this;
  };

  DispatchNode.prototype.clear = function() {
    this._handlers = [];
    this._listeners = [];
    return this._wildcard = null;
  };

  DispatchNode.prototype.use = function(handler) {
    var h, i, len;
    if (Array.isArray(handler)) {
      for (i = 0, len = handler.length; i < len; i++) {
        h = handler[i];
        this.use(h);
      }
    } else {
      this._handlers.push(handler);
    }
    return this;
  };

  DispatchNode.prototype._dispatch = function(items, args, next, method) {
    var exec, index;
    items = items.slice(0);
    index = 0;
    exec = function() {
      var item;
      if (index >= items.length) {
        return next.apply(null, args);
      }
      item = items[index];
      index++;
      return method(item, args, exec);
    };
    return exec();
  };

  DispatchNode.prototype._dispatchHandlers = function() {
    var args, i, next, url;
    url = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), next = arguments[i++];
    return this._dispatch(this._handlers, args, next, (function(_this) {
      return function(item, args, next) {
        return item.apply(null, [_this._url, url].concat(slice.call(args), [next]));
      };
    })(this));
  };

  DispatchNode.prototype._dispatchListeners = function() {
    var args, i, next, url;
    url = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), next = arguments[i++];
    return this._dispatch(this._listeners, args, next, function(item, args, next) {
      var ref;
      if (url.indexOf(item.url) !== 0) {
        return next();
      }
      return (ref = item.node).exec.apply(ref, [url].concat(slice.call(args), [next]));
    });
  };

  DispatchNode.prototype.exec = function() {
    var args, i, next, url;
    url = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), next = arguments[i++];
    return this._dispatchHandlers.apply(this, [url].concat(slice.call(args), [(function(_this) {
      return function() {
        return _this._dispatchListeners.apply(_this, [url].concat(slice.call(args), [function() {
          var ref;
          if (_this._wildcard == null) {
            return next.apply(null, args);
          }
          return (ref = _this._wildcard).exec.apply(ref, [url].concat(slice.call(args), [next]));
        }]));
      };
    })(this)]));
  };

  return DispatchNode;

})();
