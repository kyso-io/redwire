// Generated by CoffeeScript 1.8.0
var DispatchNode, expect;

expect = require('chai').expect;

DispatchNode = require('../src/dispatch-node');

describe('Dispatcher Node', function() {
  it('should exec with no nodes', function() {
    var node;
    node = new DispatchNode();
    return node.exec('http://localhost/', function() {});
  });
  it('should exec all top level handlers', function() {
    var count, node;
    node = new DispatchNode();
    count = 0;
    node.use(function(mount, url, next) {
      count++;
      return next();
    });
    node.use(function(mount, url, next) {
      count++;
      return next();
    });
    node.exec('http://localhost/', function() {});
    return expect(count).to.be.eql(2);
  });
  it('should match urls', function() {
    var count, node;
    node = new DispatchNode();
    count = 0;
    node.match('http://localhost/').use(function(mount, url, next) {
      count++;
      return next();
    });
    node.match('http://example.com/').use(function(mount, url, next) {
      count++;
      return next();
    });
    node.exec('http://localhost/', function() {});
    return expect(count).to.be.eql(1);
  });
  it('should recursively match urls', function() {
    var count, node;
    node = new DispatchNode();
    count = 0;
    node.match('http://localhost/').match('http://localhost/').use(function(mount, url, next) {
      count++;
      return next();
    });
    node.match('http://example.com/').use(function(mount, url, next) {
      count++;
      return next();
    });
    node.exec('http://localhost/', function() {});
    return expect(count).to.be.eql(1);
  });
  it('should match specific urls first', function() {
    var count, node;
    node = new DispatchNode();
    count = 0;
    node.match('http://localhost/').use(function(mount, url, next) {
      count++;
      expect(count).to.be.eql(2);
      return next();
    });
    node.match('http://localhost/specific').use(function(mount, url, next) {
      count++;
      expect(count).to.be.eql(1);
      return next();
    });
    node.match('http://example.com/').use(function(mount, url, next) {
      count++;
      return next();
    });
    node.exec('http://localhost/specific', function() {});
    return expect(count).to.be.eql(2);
  });
  it('should run top level handlers first', function() {
    var count, node;
    node = new DispatchNode();
    count = 0;
    node.use(function(mount, url, next) {
      count++;
      expect(count).to.be.eql(1);
      return next();
    });
    node.match('http://localhost/specific').use(function(mount, url, next) {
      count++;
      expect(count).to.be.eql(2);
      return next();
    });
    node.match('http://example.com/').use(function(mount, url, next) {
      count++;
      return next();
    });
    node.exec('http://localhost/specific', function() {});
    return expect(count).to.be.eql(2);
  });
  return it('should allow arrays of handlers', function() {
    var count, handler, node;
    node = new DispatchNode();
    count = 0;
    handler = function(mount, url, next) {
      count++;
      return next();
    };
    node.use([handler, handler]);
    return node.exec('http://localhost/', function() {
      return expect(count).to.be.eql(2);
    });
  });
});
