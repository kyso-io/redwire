// Generated by CoffeeScript 1.8.0
var RedWire, expect, http, net;

expect = require('chai').expect;

RedWire = require('../src/redwire');

http = require('http');

net = require('net');

describe('RedWire', function() {
  var testHttpServer, testTcpServer;
  testHttpServer = function(port, cb) {
    var server;
    server = http.createServer(function(req, res) {
      res.write('');
      res.end();
      cb(req);
      return server.close();
    });
    return server.listen(port);
  };
  testTcpServer = function(port, cb) {
    var server;
    server = net.createServer(function(socket) {
      socket.write('success');
      socket.end();
      server.close();
      return cb();
    });
    return server.listen(port);
  };
  it('should have sensible defaults', function() {
    var redwire;
    redwire = new RedWire();
    return redwire.close();
  });
  it('should autoprefix source urls with http:// if absent', function() {
    var passed, redwire;
    redwire = new RedWire({
      http: {
        port: 53435
      }
    });
    passed = false;
    redwire.http('example.com', function(mount, url, req, res, next) {
      expect(url).to.be.eql('http://example.com/test');
      return passed = true;
    });
    redwire.http('example.com').exec('http://example.com/test');
    return expect(passed).to.be.eql(true);
  });
  it('should autoprefix target urls with http:// if absent', function(done) {
    var redwire;
    redwire = new RedWire({
      http: {
        port: 53436
      }
    });
    redwire.http('localhost:53436', 'localhost:54676');
    testHttpServer(54676, function(req) {
      return expect(req.headers['host']).to.be.eql('localhost:53436');
    });
    return http.get('http://localhost:53436', function(res) {
      redwire.close();
      return done();
    });
  });
  it('should pass through query strings', function(done) {
    var redwire;
    redwire = new RedWire({
      http: {
        port: 53439
      }
    });
    redwire.http('localhost:53439', 'localhost:54679');
    testHttpServer(54679, function(req) {
      expect(req.headers['host']).to.be.eql('localhost:53439');
      return expect(req.url).to.be.eql('/query?string=should&work');
    });
    return http.get('http://localhost:53439/query?string=should&work', function(res) {
      redwire.close();
      return done();
    });
  });
  return it('should proxy tcp', function(done) {
    var client, failed1, failed2, redwire;
    redwire = new RedWire({
      tcp: {
        port: 63433
      }
    });
    redwire.tcp('localhost:63423');
    failed1 = true;
    failed2 = true;
    testTcpServer(63423, function() {
      return failed1 = false;
    });
    return client = net.connect({
      port: 63433
    }, function() {
      client.setEncoding('utf8');
      client.on('data', function(data) {
        expect(data).to.eql('success');
        return failed2 = false;
      });
      return client.on('end', function(data) {
        expect(failed1).to.be["false"]();
        expect(failed2).to.be["false"]();
        return done();
      });
    });
  });
});
